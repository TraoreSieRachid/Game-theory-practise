# Travail de Maison - Théorie des Jeux avec Python
# Objectif : Implémenter et analyser des jeux classiques en théorie des jeux.

import itertools

# Partie I
def jeu_statique(payoffs_j1, payoffs_j2):
    """
    payoffs_j1: Matrice de gains pour le Joueur 1 (liste de listes).
    payoffs_j2: Matrice de gains pour le Joueur 2 (liste de listes).
    """
    n_strategies_j1 = len(payoffs_j1)
    n_strategies_j2 = len(payoffs_j1[0])

    print("\n### Stratégies ###")
    print(f"Joueur 1 a {n_strategies_j1} stratégies.")
    print(f"Joueur 2 a {n_strategies_j2} stratégies.")

    # sous partie de I
    print("\n### xxx ###")
    for i in range(n_strategies_j1):
        for j in range(n_strategies_j2):
            payoff_j1 = payoffs_j1[i][j]
            payoff_j2 = payoffs_j2[i][j]
            
            if all(payoff_j1 >= payoffs_j1[k][j] for k in range(n_strategies_j1)) and \
               all(payoff_j2 >= payoffs_j2[i][l] for l in range(n_strategies_j2)):
                print(f"Équilibre xxx : Joueur 1 = {i+1}, Joueur 2 = {j+1}.")

    # sous partie de I
    print("\n### xxx ###")
    for i in range(n_strategies_j1):
        for j in range(n_strategies_j2):
            payoff_j1 = payoffs_j1[i][j]
            payoff_j2 = payoffs_j2[i][j]

            if all(payoff_j1 >= payoffs_j1[k][j] for k in range(n_strategies_j1)) and \
               all(payoff_j2 >= payoffs_j2[i][l] for l in range(n_strategies_j2)):
                print(f"Équilibre xxx : Joueur 1 = {i+1}, Joueur 2 = {j+1}.")

# Partie II
def jeu_dynamique(arbre):
    """
    arbre: Dictionnaire représentant l'arbre du jeu.
    Exemple :
    {
        "racine": {"action1": (gain_j1, gain_j2), "action2": {"sous_action1": (gain_j1, gain_j2)}}
    }
    """
    def explorer(noeud, chemin):
        if isinstance(noeud, dict):
            for action, sous_noeud in noeud.items():
                explorer(sous_noeud, chemin + [action])
        else:
            print(f"Chemin: {' -> '.join(chemin)}, Gains: {noeud}")

    print("\n### Exploration de l'arbre du jeu ###")
    explorer(arbre, [])

# Analyse d'un équilibre parfait en sous-jeux
def equilibre_parfait_sous_jeux(arbre):
    """
    arbre: Dictionnaire représentant l'arbre du jeu.
    Résout les équilibres parfaits en sous-jeux en partant des feuilles.
    """
    def resoudre(noeud):
        if isinstance(noeud, dict):
            resultats = {}
            for action, sous_noeud in noeud.items():
                resultats[action] = resoudre(sous_noeud)
            meilleur_action = max(resultats, key=lambda x: sum(resultats[x]))
            print(f"Sous-jeu : {resultats}, Meilleure action : {meilleur_action}")
            return resultats[meilleur_action]
        else:
            return noeud

    print("\n### Résolution de l'équilibre parfait en sous-jeux ###")
    resoudre(arbre)

# Exemple : Jeu dynamique avec équilibre parfait en sous-jeux
arbre_jeu_complexe = {
    "Début": {
        "A": {
            "AA": (3, 2),
            "AB": {"ABA": (0, 1), "ABB": (4, 0)}
        },
        "B": {
            "BA": (1, 1),
            "BB": {"BBA": (2, 3), "BBB": (0, 0)}
        }
    }
}

print("\n=== Jeu dynamique avec équilibre parfait en sous-jeux ===")
equilibre_parfait_sous_jeux(arbre_jeu_complexe)

# Exemple : Le dilemme du prisonnier
# Matrices des gains pour le dilemme du prisonnier
# Les gains sont donnés sous forme de tuples : (gain_j1, gain_j2)
payoffs_j1 = [[-1, -3], [0, -2]]  # Gains du Joueur 1
payoffs_j2 = [[-1, 0], [-3, -2]]  # Gains du Joueur 2

print("\n=== Le dilemme du prisonnier ===")
jeu_statique(payoffs_j1, payoffs_j2)

# Ajoutez un autre exemple :
# Exemple : La bataille des sexes
payoffs_j1 = [[3, 0], [0, 2]]  # Gains du Joueur 1
payoffs_j2 = [[2, 0], [0, 3]]  # Gains du Joueur 2

print("\n=== La bataille des sexes ===")
jeu_statique(payoffs_j1, payoffs_j2)
