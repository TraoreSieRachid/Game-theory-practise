# Travail de Maison - Th√©orie des Jeux avec Streamlit
# Objectif : Impl√©menter et analyser des jeux classiques en th√©orie des jeux √† l'aide d'une application Streamlit.

import streamlit as st
import nashpy as nash
import numpy as np

# Partie I : Jeux statiques avec Nashpy
def jeu_statique(payoffs_j1, payoffs_j2):
    """
    Calcule les √©quilibres de Nash √† l'aide de Nashpy.
    payoffs_j1: Matrice de gains pour le Joueur 1 (liste de listes).
    payoffs_j2: Matrice de gains pour le Joueur 2 (liste de listes).
    Retourne les √©quilibres de Nash sous forme de liste.
    """
    jeu = nash.Game(np.array(payoffs_j1), np.array(payoffs_j2))
    return list(jeu.support_enumeration())

# Partie II : Jeux dynamiques
# Non impl√©ment√© avec des biblioth√®ques sp√©cifiques dans ce cas

# Streamlit App
st.set_page_config(page_title="Th√©orie des Jeux", page_icon="üé≤", layout="wide")
st.title("Analyse de Th√©orie des Jeux")

# Onglets horizontaux
onglets = st.tabs(["Accueil", "Jeux Statique", "Jeux Dynamique", "Notions de Th√©orie des Jeux"])

with onglets[0]:
    st.header("Bienvenue")
    st.write("Cette application permet d'analyser des jeux en th√©orie des jeux. Utilisez les onglets pour naviguer entre les sections :")
    st.markdown("- **Jeux Statique** : Trouver les √©quilibres de Nash pour une matrice de gains donn√©e.")
    st.markdown("- **Jeux Dynamique** : Explorer un arbre de jeu d√©fini par l'utilisateur.")
    st.markdown("- **Notions de Th√©orie des Jeux** : D√©couvrir les concepts cl√©s.")

with onglets[1]:
    st.header("Jeux Statique : √âquilibres de Nash avec Nashpy")
    rows_j1 = st.number_input("Nombre de strat√©gies Joueur 1", min_value=2, max_value=10, value=2)
    cols_j2 = st.number_input("Nombre de strat√©gies Joueur 2", min_value=2, max_value=10, value=2)

    st.subheader("Matrice de gains pour Joueur 1")
    payoffs_j1 = []
    for i in range(rows_j1):
        row = st.text_input(f"Gains pour la strat√©gie {i+1} de Joueur 1 (s√©par√©s par des virgules)", value="0,0")
        payoffs_j1.append([int(x) for x in row.split(",")])

    st.subheader("Matrice de gains pour Joueur 2")
    payoffs_j2 = []
    for i in range(rows_j1):
        row = st.text_input(f"Gains pour la strat√©gie {i+1} de Joueur 2 (s√©par√©s par des virgules)", value="0,0")
        payoffs_j2.append([int(x) for x in row.split(",")])

    if st.button("Calculer les √âquilibres de Nash"):
        try:
            equilibres = jeu_statique(payoffs_j1, payoffs_j2)
            if equilibres:
                st.write("√âquilibres de Nash trouv√©s :")
                for eq in equilibres:
                    st.write(f"Joueur 1 : {eq[0]}, Joueur 2 : {eq[1]}")
            else:
                st.write("Aucun √©quilibre trouv√©.")
        except Exception as e:
            st.error(f"Erreur dans le calcul des √©quilibres : {e}")

with onglets[2]:
    st.header("Jeux Dynamiques : Exploration de l'arbre")
    st.write("Cette section peut √™tre enrichie √† l'avenir avec des biblioth√®ques comme Gambit pour une analyse plus pouss√©e des arbres de jeu.")

with onglets[3]:
    st.header("Notions de Th√©orie des Jeux")
    st.write("La th√©orie des jeux est une branche des math√©matiques qui analyse les interactions strat√©giques entre des agents rationnels.")
    st.subheader("√âquilibre de Nash")
    st.write("Un √©quilibre de Nash est une situation o√π aucun joueur ne peut am√©liorer son gain en changeant unilat√©ralement de strat√©gie.")
    st.subheader("Jeux Dynamiques")
    st.write("Les jeux dynamiques mod√©lisent des d√©cisions s√©quentielles o√π les joueurs agissent √† tour de r√¥le en observant les actions pr√©c√©dentes.")
    st.subheader("Applications")
    st.write("La th√©orie des jeux est utilis√©e en √©conomie, biologie, politique, informatique, etc.")
